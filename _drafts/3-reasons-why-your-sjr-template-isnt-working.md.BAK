---
layout: post
title: "3 Reasons Why Your SJR Template Isn't Working"
---

When you are dealing with an SJR template that just isn't working it can be the most frustrating thing in the world.
It can seem like no matter what you put into that js.erb template, the resulting JS shows no life whatsoever. 
You spend days trying to figure out the problem, and no solutions are working.
Worst of all, there are usually no error messages to guide your debugging or make sense of the behavior you are seeing. 
Sometimes you get to the point where it just isn't worth it anymore, and you have to give up and move on. 

After experiencing this many times myself, I've learned to be on the lookout for 3 categories of errors that are usually the cause of my troubles.
Once you learn to spot the symptoms of each, you'll have a much easier time debugging your Rails SJR requests and can get back to maximum productivity.

## 1. Errors in your Ruby code

**Ruby Runtime Errors** are ones that you are already familiar with from your other Ruby code and are the easiest to spot and debug.

When embedded Ruby (found within `<%= %>` tags when using ERB) causes one of these errors, the entire request will fail.
This turns out to be a good thing because Rails "fails loudly" and lets you know all about it in a couple of ways. 

First, the **Rails server log** will print an error message along with a stack trace that points to the offending line in the SJR template.
[insert picture here]

You can also spot the error by using your web browser's **developer debugging tools**. 
There will typically be an alert or error message in the console that lets you know that the result of the AJAX request was a failure (500 server error).
You can even inspect the body of the response in the XHRs section and will show you the standard Rails error page. 
[insert picture here]

Once you know you are dealing with a Ruby runtime error, you need only look at the error message to determine the cause.
By far, the most common message you'll see is `undefined method for nil:NilClass`. 
This indicates that you are trying to call a method on something that is `nil`, usually because you have an instance or local variable that was never defined.

Here is a checklist to help you debug:

* **Make sure you aren't using variables in your template which haven't been set by the controller**. 
Remember, your SJR template only has access to the instance variables defined _in the current controller action_, not ones from the previous request.

* **Check any partials you are rendering for instance variables**. 
One of the benefits of SJR templates is the ability render existing partials, however many times those partials contain instance variables which you may not remember to set in your controller action. 
This is why I suggest to [stop using instance variables in your partials]({{ site.baseurl }}{% link _posts/2016-09-19-stop-using-instance-variables-in-partials.md %}) altogether.

## 2. Errors in your JavaScript code

Just like Ruby runtime errors, you can also have **JavaScript runtime errors** in your SJR templates. 
Unlike their Ruby counterparts, however, these are much harder to spot because they do not result in server errors or console alerts by default.

When an error like this occurs, nothing will happen. 
Your template will fail silently. 

When debugging these kind of errors, try the following:

* **Wrap your JavaScript code in a try-catch block**
You can catch any exceptions thrown by your JS code and print the error into the console using `console.error`.

  ```
  try { 
    // SJR template code goes here 
  } catch(e) { 
    console.error(e); 
  }
  ```
You will now see an error message in the browser debugging tools indicating what the error is.

* **Ensure that all of your variables have been defined**.
Much like above, make sure you understand the scope within which your JS code is running and don't use or call functions on variables which don't exist.

## 3. Malformed JavaScript code

**JavaScript syntax errors** occur when your code is not compiled correctly. 
These are the hardest to spot because not only do they fail silently by default, but wrapping them in a try-catch block like above won't work because the code itself is invalid (and therefore won't even be executed).  

By far, the most common reason errors like this occur when using SJR is due to not escaping content using `escape_javascript`.

Here are some debugging tips:

* **Check the response body in the debugging tools**. 
  Does it look syntactically correct? Does it have proper syntax highlighting and spacing? 
  Here's an example of a malformed JS response
  [insert screen shot here]

* **Replace embedded Ruby with static strings**.
  
  ```
  // original using ERB
  $("#foo").html("<%= ... %>");

  // replace with...
  $("#foo").html("Debugging test");
  ```
This will help you identify if your ERB calls are the culprit. 
